//------------------------------------------------------------------------------
// File   : tLanguage_ZH.cs
// Author : Saro
// Time   : 2022/4/8 22:36:47
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.IO;
using System.Text;
using System.Threading.Tasks;

namespace Saro.Table
{
    public sealed class TLanguageZh
    {
        /// <summary>
        ///     id
        /// </summary>
        public int key;

        /// <summary>
        /// </summary>
        public string txt;
    }

    public sealed class CsvLanguageZh : BaseTable<TLanguageZh, CsvLanguageZh>
    {
        public static TLanguageZh Query(int key)
        {
            var combinedkey = KeyHelper.GetKey(key);
            if (!Get().Load()) throw new Exception("load table failed.type: " + nameof(TLanguageZh));
            if (Get().datas.TryGetValue(combinedkey, out var t)) return t;
            throw new Exception("null table. type: " + nameof(TLanguageZh));
        }

        public static async ValueTask<TLanguageZh> QueryAsync(int key)
        {
            var combinedkey = KeyHelper.GetKey(key);
            var result = await Get().LoadAsync();
            if (!result) throw new Exception("load table failed.type: " + nameof(TLanguageZh));
            if (Get().datas.TryGetValue(combinedkey, out var t)) return t;
            throw new Exception("null table. type: " + nameof(TLanguageZh));
        }


        public override bool Load()
        {
            if (loaded) return true;
            var bytes = GetBytes("Language_ZH.txt");

            using (var ms = new MemoryStream(bytes, false))
            {
                using (var br = new BinaryReader(ms))
                {
                    var version = br.ReadInt32(); //version
                    if (version != TableLoader.DataVersion)
                        throw new Exception(
                            $"table error version. file:{version}  exe:{TableLoader.DataVersion}");

                    var dataLen = br.ReadInt32();
                    for (var i = 0; i < dataLen; i++)
                    {
                        var data = new TLanguageZh();
                        data.key = br.ReadInt32();
                        data.txt = br.ReadString();
                        var key = br.ReadUInt64();
                        datas[key] = data;
                    }
                }
            }
            loaded = true;

            return true;
        }

        public override async ValueTask<bool> LoadAsync()
        {
            if (loaded) return true;
            var bytes = await GetBytesAsync("Language_ZH.txt");

            using (var ms = new MemoryStream(bytes, false))
            {
                using (var br = new BinaryReader(ms))
                {
                    var version = br.ReadInt32(); //version
                    if (version != TableLoader.DataVersion)
                        throw new Exception(
                            $"table error version. file:{version}  exe:{TableLoader.DataVersion}");

                    var dataLen = br.ReadInt32();
                    for (var i = 0; i < dataLen; i++)
                    {
                        var data = new TLanguageZh();
                        data.key = br.ReadInt32();
                        data.txt = br.ReadString();
                        var key = br.ReadUInt64();
                        datas[key] = data;
                    }
                }
            }
            loaded = true;

            return true;
        }

        public string PrintTable()
        {
            StringBuilder sb = null;
#if ENABLE_TABLE_LOG
			sb = new StringBuilder(2048);
			foreach (var data in m_Datas.Values)
			{
				sb.Append(data.key).Append("\t");
				sb.Append(data.txt).Append("\t");
				sb.AppendLine();
			}
#endif

            return sb?.ToString();
        }
    }
}