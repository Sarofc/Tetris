//------------------------------------------------------------------------------
// File   : tLanguage_ZH.cs
// Author : Saro
// Time   : 2022/3/14 0:21:02
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Saro.Table
{
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Text;
    
    
    public sealed class tLanguage_ZH
    {
        
        /// <summary>
        /// id
        /// </summary>
        public int key;
        
        /// <summary>
        /// 
        /// </summary>
        public string txt;
    }
    
    public sealed class csvLanguage_ZH : BaseTable<tLanguage_ZH, csvLanguage_ZH>
    {
        
		public static tLanguage_ZH Query(int key)
		{
			var __combinedkey = KeyHelper.GetKey(key);
			if (!Get().Load()) throw new System.Exception("load table failed.type: " + nameof(tLanguage_ZH));
			if (Get().m_Datas.TryGetValue(__combinedkey, out tLanguage_ZH t))
			{
				return t;
			}
			throw new System.Exception("null table. type: " + nameof(tLanguage_ZH));
		}

        
        public override bool Load()
        {
			if (m_Loaded) return true;
			var bytes = GetBytes("Language_ZH.txt");

			using (var ms = new MemoryStream(bytes, false))
			{
				using (var br = new BinaryReader(ms))
				{
					var version = br.ReadInt32();//version
					if (version != TableCfg.k_DataVersion)
						throw new System.Exception($"table error version. file:{version}  exe:{TableCfg.k_DataVersion}");

					var dataLen = br.ReadInt32();
					for (int i = 0; i < dataLen; i++)
					{
						var data = new tLanguage_ZH();
						data.key = br.ReadInt32();
						data.txt = br.ReadString();
						var _key = br.ReadUInt64();
						m_Datas[_key] = data;
					}
				}
			}
			m_Loaded = true;

            return true;
        }
        
        public string PrintTable()
        {
			StringBuilder sb = null;
#if ENABLE_TABLE_LOG
			sb = new StringBuilder(2048);
			foreach (var data in m_Datas.Values)
			{
				sb.Append(data.key).Append("\t");
				sb.Append(data.txt).Append("\t");
				sb.AppendLine();
			}
#endif

            return sb?.ToString();
        }
    }
}
